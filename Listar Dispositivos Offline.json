[{"id":"e66f46cc57d0675e","type":"group","z":"b33cbbf26c105ff6","name":"Listar Dispositivos Offline","style":{"label":true},"nodes":["6350adb9d3fccc87","e844977fcca2f374","ed08912f9e7782a5","663651a726431d22","742194443af2df4e","07b02c6f5c6d3881","ad96b14222516e97"],"x":134,"y":4399,"w":732,"h":142},{"id":"6350adb9d3fccc87","type":"inject","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"","props":[],"repeat":"60","crontab":"","once":true,"onceDelay":"15","topic":"","x":230,"y":4440,"wires":[["e844977fcca2f374"]]},{"id":"e844977fcca2f374","type":"ha-api","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"","server":"33803899.487d48","version":1,"debugenabled":false,"protocol":"websocket","method":"get","path":"","data":"{\"type\": \"config/device_registry/list\"}","dataType":"jsonata","responseType":"json","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"results"}],"x":370,"y":4440,"wires":[["ed08912f9e7782a5"]]},{"id":"ed08912f9e7782a5","type":"function","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"Device List","func":"// Seus dados de entrada estão em msg.payload\n\n// Array para armazenar os dispositivos encontrados\nvar allDevices = [];\n\n// Percorre os objetos dentro de \"payload\" para obter o device_name e o device_id de cada dispositivo\nfor (var i = 0; i < msg.payload.length; i++) {\n    var device = msg.payload[i];\n    // Adiciona o dispositivo encontrado ao array\n    allDevices.push({\n        device_name: device.name,\n        device_id: device.id\n    });\n}\n\n// Adiciona o array de dispositivos ao msg e retorna\nmsg.devices = allDevices;\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":4440,"wires":[["663651a726431d22"]]},{"id":"663651a726431d22","type":"ha-api","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"","server":"33803899.487d48","version":1,"debugenabled":false,"protocol":"websocket","method":"get","path":"","data":"{\"type\": \"config/entity_registry/list\"}","dataType":"jsonata","responseType":"json","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"results"}],"x":370,"y":4500,"wires":[["ad96b14222516e97","d07fae633e83d975","7ea755112df1039a"]]},{"id":"742194443af2df4e","type":"debug","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"debug 454","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":750,"y":4440,"wires":[]},{"id":"07b02c6f5c6d3881","type":"ha-sensor","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"Unavailable Devices","entityConfig":"5e35598e30f79954","version":0,"state":"deviceNamesWithIssuesCount","stateType":"msg","attributes":[{"property":"Device Name","value":"deviceNamesWithIssues","valueType":"msg"}],"inputOverride":"allow","outputProperties":[],"x":740,"y":4500,"wires":[[]]},{"id":"ad96b14222516e97","type":"function","z":"b33cbbf26c105ff6","g":"e66f46cc57d0675e","name":"Entities","func":"// Seus dados de entrada estão em msg.payload\n// Seus dispositivos estão em msg.devices\n\n// Define a variável para acessar o estado global\nvar globalStates = global.get('homeassistant.homeAssistant.states');\n\n// Array para armazenar dispositivos com entidades no estado \"unknown\" ou \"unavailable\"\nvar devicesWithUnknownOrUnavailableEntities = [];\n\n// Array para armazenar apenas os nomes dos dispositivos da lista devicesWithUnknownOrUnavailableEntities\nvar deviceNamesWithIssues = [];\n\n// Define a lista de exclusão de entidades\nvar exclusionList = [\n    \"siren.entrada_siren\",\n    \"device_tracker.lg_v500\",\n    \"switch.requisicao_de_status\",\n    \"switch.particao_a\",\n    \"switch.particao_b\",\n    \"switch.particao_c\",\n    \"switch.particao_d\",\n    \"switch.central\",\n    \"switch.pgm_1\",\n    \"switch.pgm_2\",\n    \"switch.pgm_3\",\n    \"switch.sirene\",\n    \"binary_sensor.node_pve_updates_packages\",\n    \"conversation.google_generative_ai_conversation\",\n    \"sensor.ack\",\n    \"sensor.zigbee2mqtt_bridge_permit_join_timeout\",\n    \"sensor.maquina_de_lavar_voltage\",\n    \"sensor.punto_battery\",\n    \"sensor.up_battery\",\n    \"sensor.dongle_e_light_indicator_level\"\n]; // Adicione mais entity_id conforme necessário\n\n// Define a lista de exclusão de dispositivos inteiros (por nome ou device_id)\nvar excludedDevices = [\n    \"5465e970e4fc48da80abd8e9e92427c1_100_40004\" // Exemplo de nome de dispositivo\n    // \"sensor_gateway\", // Exemplo de outro nome de dispositivo\n    // \"device_id_exemplo\" // Pode ser usado um device_id diretamente\n]; // Adicione mais dispositivos conforme necessário\n\n// Percorre os objetos dentro de \"payload\" para encontrar as entidades para cada device_id\nfor (var i = 0; i < msg.devices.length; i++) {\n    var device = msg.devices[i];\n    \n    // Verifica se o dispositivo está na lista de exclusão\n    if (excludedDevices.includes(device.device_name) || excludedDevices.includes(device.device_id)) {\n        continue; // Pula a iteração se o dispositivo deve ser ignorado\n    }\n\n    device.entities = []; // Inicializa o array de entidades para cada dispositivo\n    var hasUnknownOrUnavailableEntity = false; // Flag para indicar se há entidade com estado \"unknown\" ou \"unavailable\"\n\n    for (var j = 0; j < msg.payload.length; j++) {\n        var entity = msg.payload[j];\n\n        // Verifica se o entity_id não começa com \"button.\" ou \"select.\"\n        if (entity.device_id === device.device_id && !entity.entity_id.startsWith(\"button.\") && !entity.entity_id.startsWith(\"text.\") && !entity.entity_id.startsWith(\"event.\") && !entity.entity_id.startsWith(\"select.\")) {\n            // Obtém o estado da entidade a partir da variável global\n            var entityState = globalStates[entity.entity_id] ? globalStates[entity.entity_id].state : null;\n\n            // Adiciona a entidade ao array de entidades do dispositivo correspondente, mantendo apenas as propriedades desejadas\n            device.entities.push({\n                area_id: entity.area_id,\n                entity_id: entity.entity_id,\n                original_name: entity.original_name,\n                state: entityState\n            });\n\n            // Verifica se o estado da entidade é \"unknown\" ou \"unavailable\", e se não está na lista de exclusão\n            if ((entityState === \"unknown\" || entityState === \"unavailable\") && !exclusionList.includes(entity.entity_id)) {\n                hasUnknownOrUnavailableEntity = true;\n            }\n        }\n    }\n\n    // Se o dispositivo tem entidades com estado \"unknown\" ou \"unavailable\" que não estão na lista de exclusão, adiciona ao array de dispositivos\n    if (hasUnknownOrUnavailableEntity) {\n        devicesWithUnknownOrUnavailableEntities.push(device);\n        deviceNamesWithIssues.push(device.device_name); // Adiciona o nome do dispositivo ao array de nomes com problemas\n    }\n}\n\n// Verifica se array está definido e é realmente um array\nif (deviceNamesWithIssues.length === 0) {\n    msg.deviceNamesWithIssues = \"\";\n    msg.deviceNamesWithIssuesCount = 0;\n} else if (deviceNamesWithIssues.length === 1) {\n    // Se o array tiver apenas um elemento, não precisa de transformação\n    msg.deviceNamesWithIssues = deviceNamesWithIssues[0];\n    msg.deviceNamesWithIssuesCount = deviceNamesWithIssues.length;\n} else if (deviceNamesWithIssues.length === 2) {\n    // Se o array tiver dois elementos, separa por \"e\"\n    msg.deviceNamesWithIssues = deviceNamesWithIssues.join(' e ');\n    msg.deviceNamesWithIssuesCount = deviceNamesWithIssues.length;\n} else if (deviceNamesWithIssues.length > 2) {\n    // Define msg.deviceNamesWithIssuesCount antes de usar a função pop\n    msg.deviceNamesWithIssuesCount = deviceNamesWithIssues.length;\n    // Se o array tiver mais de dois elementos, separa por vírgulas exceto o último elemento que é separado por \"e\"\n    let lastElement = deviceNamesWithIssues.pop();\n    let texto = deviceNamesWithIssues.join(', ') + ' e ' + lastElement;\n    msg.deviceNamesWithIssues = texto;\n}\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":4500,"wires":[["742194443af2df4e","07b02c6f5c6d3881"]]},{"id":"33803899.487d48","type":"server","name":"Home Assistant","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"5e35598e30f79954","type":"ha-entity-config","server":"33803899.487d48","name":"Unavailable Devices","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Unavailable Devices"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":""}],"resend":false,"debugEnabled":false}]